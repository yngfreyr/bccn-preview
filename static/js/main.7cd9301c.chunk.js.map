{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["Wrapper","styled","main","Scene","div","props","width","height","perspective","Carousel","degree","Cell","rotateY","translateZ","imageURL","App","useState","setDegree","swipeHandler","useSwipeable","onSwipedLeft","deltaX","prevState","onSwipedRight","delta","preventDefaultTouchmoveEvent","trackTouch","trackMouse","scene","map","l","i","a","Math","tan","PI","length","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iLAIMA,EAAUC,IAAOC,KAAV,mEAAGD,CAAH,6DASPE,EAAQF,IAAOG,IAAV,iEAAGH,CAAH,qJAEE,SAAAI,GAAK,OAAIA,EAAMC,SACd,SAAAD,GAAK,OAAIA,EAAME,UACV,SAAAF,GAAK,OAAIA,EAAMG,eAO5BC,EAAWR,IAAOG,IAAV,oEAAGH,CAAH,uIAKW,SAAAI,GAAK,OAAIA,EAAMK,UAIlCC,EAAOV,IAAOG,IAAV,gEAAGH,CAAH,+QAEG,SAAAI,GAAK,OAAIA,EAAMC,SACd,SAAAD,GAAK,OAAIA,EAAME,UACJ,SAAAF,GAAK,OAAIA,EAAMO,WAA0B,SAAAP,GAAK,OAAIA,EAAMQ,cACrD,SAAAR,GAAK,OAAIA,EAAMS,YAU5B,SAASC,IAAO,IAAD,EACAC,mBAAS,GADT,mBACrBN,EADqB,KACbO,EADa,KAEtBC,EAAeC,uBAAa,CAChCC,aAAc,gBAAGC,EAAH,EAAGA,OAAH,OAAgBJ,GAAU,SAAAK,GAAS,OAAIA,EAAYD,MACjEE,cAAe,gBAAGF,EAAH,EAAGA,OAAH,OAAgBJ,GAAU,SAAAK,GAAS,OAAIA,EAAYD,MAClEG,MAAO,GAAIC,8BAA8B,EAAOC,YAAY,EAAMC,YAAY,IAE1EC,EAAQ,CACZtB,MAAO,GACPC,OAAQ,GACRC,YAAa,KAYf,OACE,cAACR,EAAD,2BAAakB,GAAb,aACE,cAACf,EAAD,2BAAWyB,GAAX,aACE,cAACnB,EAAD,CAAUC,OAAQA,EAAlB,SAbQ,CACZ,kBACA,kBACA,kBACA,kBACA,kBACA,kBACA,mBAOamB,KAAI,SAACC,EAAGC,EAAGC,GAAP,OACT,cAACrB,EAAD,CAEEL,MAAOsB,EAAMtB,MACbC,OAAQqB,EAAMrB,OACdM,WAAae,EAAMtB,MAAQ,EAAK2B,KAAKC,IAAID,KAAKE,GAAKH,EAAEI,QACrDxB,QAAU,IAAMoB,EAAEI,OAAUL,EAC5BjB,SAAUgB,GALLA,cC5EnB,IAYeO,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACjC,EAAD,MAEFkC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.7cd9301c.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport { useSwipeable } from 'react-swipeable'\nimport styled from 'styled-components/macro'\n\nconst Wrapper = styled.main`\n    position: fixed;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    z-index: 0;\n`\n\nconst Scene = styled.div`\n    position: absolute;\n    width: ${props => props.width}vw;\n    height: ${props => props.height}vh;\n    perspective: ${props => props.perspective}px;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    transition: all 1000ms ease-in-out;\n`\n\nconst Carousel = styled.div`\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    transform-style: preserve-3d;\n    transform: rotateY(${props => props.degree}deg);\n\t\ttransition: all 1000ms ease-in-out;\n`\n\nconst Cell = styled.div`\n    position: absolute;\n    width: ${props => props.width}vw;\n    height: ${props => props.height}vh;\n    transform: rotateY(${props => props.rotateY}deg) translateZ(${props => props.translateZ}vw);\n    background-image: url(${props => props.imageURL});\n    background-size: contain;\n    background-repeat: no-repeat;\n    background-position: center;\n    overflow: hidden;\n    border-width: 1px;\n    border-style: solid;\n    border-color: #e5e7eb;\n`\n\nexport default function App() {\n  const [degree, setDegree] = useState(0)\n  const swipeHandler = useSwipeable({\n    onSwipedLeft: ({ deltaX }) => setDegree(prevState => prevState + deltaX),\n    onSwipedRight: ({ deltaX }) => setDegree(prevState => prevState - deltaX),\n    delta: 10, preventDefaultTouchmoveEvent: false, trackTouch: true, trackMouse: true\n  })\n  const scene = {\n    width: 30,\n    height: 40,\n    perspective: 2000\n  }\n  const links = [\n    '/images/001.png',\n    '/images/002.png',\n    '/images/003.png',\n    '/images/004.png',\n    '/images/005.png',\n    '/images/006.png',\n    '/images/007.png'\n  ]\n\n  return (\n    <Wrapper {...swipeHandler}>\n      <Scene {...scene}>\n        <Carousel degree={degree}>\n          {links.map((l, i, a) => (\n            <Cell\n              key={l}\n              width={scene.width}\n              height={scene.height}\n              translateZ={(scene.width / 2) / Math.tan(Math.PI / a.length)}\n              rotateY={(360 / a.length) * i}\n              imageURL={l}\n            />\n          ))}\n        </Carousel>\n      </Scene>\n    </Wrapper>\n  )\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}